# The interface `lorri daemon` exposes.
interface com.target.lorri

# Monitor the daemon. The method will reply with an update whenever a build begins or ends.
# Monitor will immediately reply with a snapshot of known projects, then a marker event,
# indicating that the stream of events is now "live."
method Monitor() -> (event: Event)

type Event (
    kind: (section_end, started, completed, failure),
    section: ?SectionMarker, # present iff kind == section_end
    reason: ?Reason,         # present iff kind == started
    result: ?Outcome,        # present iff kind == completed
    failure: ?Failure        # present iff kind == failure
)


type SectionMarker ()

type Reason (
    kind: (project_added, ping_received, files_changed, unknown),
    project: ?string, # present iff kind == project_added
    files: ?[]string, # present iff kind == files_changed
    debug: ?string    # present iff kind == unknown
)

type Outcome (
    nix_file: ?string,
    project_root: string
)

type Failure (
    kind: (io, spawn, exit, output),
    nix_file: string,
    io: ?IOFail,        # present iff kind == io
    spawn: ?SpawnFail,  # present iff kind == spawn
    exit: ?ExitFail,    # present iff kind == exit
    output: ?OutputFail # present iff kind == output
)

type IOFail (
    msg: string
)

type SpawnFail (
    msg: string,
    cmd: string
)

type ExitFail (
    cmd: string,
    status: ?int,
    logs: []string
)

type OutputFail (
    msg: string
)
